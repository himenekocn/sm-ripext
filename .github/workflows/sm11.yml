name: build

on:
  push:
    branches:
      - main
    paths-ignore:
      - LICENSE
      - README.md
  pull_request:
    paths-ignore:
      - LICENSE
      - README.md
  schedule:
    - cron: '30 03 01 */3 *' # Artifacts expire every 3 months

jobs:
  build:
    name: build with sm${{ matrix.sm_version }} on ${{ matrix.os_short }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

        sm_version:
          - "1.11"

        mm_version:
          - "1.12"

        include:
          - mm_version: "1.12"
            mm_branch: "master"

          - sm_version: "1.11"
            sm_branch: "master"

          - os: ubuntu-latest
            target-archs: x86,x86_64

          - os: windows-latest
            target-archs: x86,x86_64

          - os: macos-latest
            target-archs: x86_64

    steps:
      - name: Prepare env
        shell: bash
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y clang g++-multilib
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
      - name: Add msbuild to PATH (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          :: See https://github.com/microsoft/vswhere/wiki/Find-VC
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x86 -host_arch=x64
          )
          :: Loop over all environment variables and make them global.
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )
          
      
      - name: Checking out SourceMod
        uses: actions/checkout@v2
        with:
          repository: alliedmodders/sourcemod
          ref: ${{ matrix.sm_branch }}
          path: sourcemod-${{ matrix.sm_version }}
          submodules: recursive

      - name: Checking out AMBuild
        uses: actions/checkout@v2
        with:
          repository: alliedmodders/ambuild
          path: ambuild

      - name: Setting up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Setting up ambuild
        working-directory: ambuild
        run: python setup.py install

      - name: Checking out own repository
        uses: actions/checkout@v2
        with:
          path: sm-ripext

      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: extension

      - name: Compiling Sm-ripext files
        working-directory: extension
        shell: bash
        run: |
          mkdir build && cd build
          perl ../curl/lib/mk-ca-bundle.pl
          python ../configure.py --enable-optimize --sm-path="${{ github.workspace }}/sourcemod-${{ matrix.sm_version }}" --mms-path="${{ github.workspace }}/metamod-${{ matrix.mm_version }}"
          ambuild

      - name: Uploading package
        uses: actions/upload-artifact@v2
        with:
          name: sm-ripext-sm${{ matrix.sm_version }}-${{ matrix.os_short }}-${{ env.GITHUB_SHA_SHORT }}
          path: sm-ripext/build/package
